CREATE TABLE departments (
    dept_id INT PRIMARY KEY,
    dept_name VARCHAR(50) NOT NULL
);

-- Insert dummy data into departments
INSERT INTO departments (dept_id, dept_name) VALUES
(1, 'Human Resources'),
(2, 'Finance'),
(3, 'IT'),
(4, 'Marketing');





CREATE TABLE employees (
    emp_id INT PRIMARY KEY,
    emp_name VARCHAR(50) NOT NULL,
    dept_id INT,
    salary DECIMAL(10, 2),
    manager_id INT,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id),
    FOREIGN KEY (manager_id) REFERENCES employees(emp_id)
);

-- Insert dummy data into employees
INSERT INTO employees (emp_id, emp_name, dept_id, salary, manager_id) VALUES
(1, 'Alice', 1, 60000, NULL),
(2, 'Bob', 2, 50000, 1),
(3, 'Charlie', 3, 70000, 1),
(4, 'David', 3, 55000, 3),
(5, 'Eve', 4, 65000, 3),
(6, 'Frank', NULL, 40000, NULL); -- Employee without department

CREATE TABLE projects (
    project_id INT PRIMARY KEY,
    project_name VARCHAR(50) NOT NULL,
    dept_id INT,
    FOREIGN KEY (dept_id) REFERENCES departments(dept_id)
);

-- Insert dummy data into projects
INSERT INTO projects (project_id, project_name, dept_id) VALUES
(1, 'Project Alpha', 1),
(2, 'Project Beta', 2),
(3, 'Project Gamma', 3),
(4, 'Project Delta', 4),
(5, 'Project Epsilon', NULL); -- Project without a department

CREATE TABLE employee_projects (
    emp_id INT,
    project_id INT,
    PRIMARY KEY (emp_id, project_id),
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id),
    FOREIGN KEY (project_id) REFERENCES projects(project_id)
);

-- Insert dummy data into employee_projects
INSERT INTO employee_projects (emp_id, project_id) VALUES
(1, 1),
(2, 2),
(3, 3),
(4, 3),
(5, 4),
(6, 5); -- Employee without department assigned to a project


1. Inner Join: List All Employees with Their Department Names
sql
Copy code
SELECT e.emp_id, e.emp_name, d.dept_name
FROM employees e
INNER JOIN departments d ON e.dept_id = d.dept_id;
Explanation: This query retrieves each employee's ID, name, and their department name by performing an inner join between the employees and departments tables based on the matching dept_id.

2. Left Join: List All Employees and Their Department Names (Including Employees Without a Department)
sql
Copy code
SELECT e.emp_id, e.emp_name, d.dept_name
FROM employees e
LEFT JOIN departments d ON e.dept_id = d.dept_id;
Explanation: This query lists all employees along with their department names, if any. Employees without a department will still be included, but the dept_name will be NULL for those employees.

3. Right Join: List All Departments and Employees Assigned to Them
sql
Copy code
SELECT d.dept_name, e.emp_name
FROM departments d
RIGHT JOIN employees e ON d.dept_id = e.dept_id;
Explanation: This query retrieves all departments and the employees associated with them. Departments without employees will still be listed, showing a NULL value for emp_name.

4. Full Outer Join: List All Employees and Departments (Including Unassigned Employees and Departments)
sql
Copy code
SELECT e.emp_id, e.emp_name, d.dept_name
FROM employees e
FULL OUTER JOIN departments d ON e.dept_id = d.dept_id;
Explanation: This query lists all employees and departments, including employees without a department and departments without employees. Note: Not all SQL databases support FULL OUTER JOIN.

5. Self Join: Find Employees Who Report to Each Other
sql
Copy code
SELECT e1.emp_name AS Employee, e2.emp_name AS Manager
FROM employees e1
INNER JOIN employees e2 ON e1.manager_id = e2.emp_id;
Explanation: This self-join lists each employee and their manager by joining employees to itself on the manager_id field.

6. Subquery with IN: Find Employees Who Work in Departments with “Tech” in Their Name
sql
Copy code
SELECT emp_name
FROM employees
WHERE dept_id IN (SELECT dept_id FROM departments WHERE dept_name LIKE '%Tech%');
Explanation: This query uses a subquery to find the dept_id of departments with "Tech" in their name, then retrieves the employees in those departments.

7. Correlated Subquery: Find Employees Earning Above the Average Salary in Their Department
sql
Copy code
SELECT emp_name, salary
FROM employees e
WHERE salary > (SELECT AVG(salary) FROM employees WHERE dept_id = e.dept_id);
Explanation: This correlated subquery retrieves employees whose salary is above the average salary of their respective departments. The subquery is evaluated for each row of the employees table.

8. EXISTS: Find Departments with At Least One Employee
sql
Copy code
SELECT dept_name
FROM departments d
WHERE EXISTS (SELECT 1 FROM employees e WHERE e.dept_id = d.dept_id);
Explanation: This query lists departments that have at least one employee. The EXISTS clause checks for the existence of rows in the subquery.

9. View Creation: Create a View for Employees with Their Project Names
sql
Copy code
CREATE VIEW emp_project_view AS
SELECT e.emp_name, p.project_name
FROM employees e
JOIN employee_projects ep ON e.emp_id = ep.emp_id
JOIN projects p ON ep.project_id = p.project_id;
Explanation: This query creates a view named emp_project_view that shows each employee along with the projects they are assigned to. The view can be queried like a table.

Usage:

sql
Copy code
SELECT * FROM emp_project_view;
10. View with Aggregation: Create a View to Show Department-Wise Average Salary
sql
Copy code
CREATE VIEW dept_avg_salary AS
SELECT d.dept_name, AVG(e.salary) AS avg_salary
FROM departments d
JOIN employees e ON d.dept_id = e.dept_id
GROUP BY d.dept_name;
Explanation: This view calculates the average salary per department. The GROUP BY clause groups the data by department, and AVG calculates the average salary.

Usage:

sql
Copy code
SELECT * FROM dept_avg_salary;
